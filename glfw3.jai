
GLFW_VERSION_MAJOR ::          3;
GLFW_VERSION_MINOR ::          2;
GLFW_VERSION_REVISION ::       1;

GLFW_TRUE ::                   1;
GLFW_FALSE ::                  0;

GLFW_RELEASE ::                0;
GLFW_PRESS ::                  1;
GLFW_REPEAT ::                 2;

GLFW_KEY_UNKNOWN ::            -1;
GLFW_KEY_SPACE ::              32;
GLFW_KEY_APOSTROPHE ::         39;  /* ' */
GLFW_KEY_COMMA ::              44;  /* , */
GLFW_KEY_MINUS ::              45;  /* - */
GLFW_KEY_PERIOD ::             46;  /* . */
GLFW_KEY_SLASH ::              47;  /* / */
GLFW_KEY_0 ::                  48;
GLFW_KEY_1 ::                  49;
GLFW_KEY_2 ::                  50;
GLFW_KEY_3 ::                  51;
GLFW_KEY_4 ::                  52;
GLFW_KEY_5 ::                  53;
GLFW_KEY_6 ::                  54;
GLFW_KEY_7 ::                  55;
GLFW_KEY_8 ::                  56;
GLFW_KEY_9 ::                  57;
GLFW_KEY_SEMICOLON ::          59;  /* ; */
GLFW_KEY_EQUAL ::              61;  /* = */
GLFW_KEY_A ::                  65;
GLFW_KEY_B ::                  66;
GLFW_KEY_C ::                  67;
GLFW_KEY_D ::                  68;
GLFW_KEY_E ::                  69;
GLFW_KEY_F ::                  70;
GLFW_KEY_G ::                  71;
GLFW_KEY_H ::                  72;
GLFW_KEY_I ::                  73;
GLFW_KEY_J ::                  74;
GLFW_KEY_K ::                  75;
GLFW_KEY_L ::                  76;
GLFW_KEY_M ::                  77;
GLFW_KEY_N ::                  78;
GLFW_KEY_O ::                  79;
GLFW_KEY_P ::                  80;
GLFW_KEY_Q ::                  81;
GLFW_KEY_R ::                  82;
GLFW_KEY_S ::                  83;
GLFW_KEY_T ::                  84;
GLFW_KEY_U ::                  85;
GLFW_KEY_V ::                  86;
GLFW_KEY_W ::                  87;
GLFW_KEY_X ::                  88;
GLFW_KEY_Y ::                  89;
GLFW_KEY_Z ::                  90;
GLFW_KEY_LEFT_BRACKET ::       91;  /* [ */
GLFW_KEY_BACKSLASH ::          92;  /* \ */
GLFW_KEY_RIGHT_BRACKET ::      93;  /* ] */
GLFW_KEY_GRAVE_ACCENT ::       96;  /* ` */
GLFW_KEY_WORLD_1 ::            161; /* non-US #1 */
GLFW_KEY_WORLD_2 ::            162; /* non-US #2 */
GLFW_KEY_ESCAPE ::             256;
GLFW_KEY_ENTER ::              257;
GLFW_KEY_TAB ::                258;
GLFW_KEY_BACKSPACE ::          259;
GLFW_KEY_INSERT ::             260;
GLFW_KEY_DELETE ::             261;
GLFW_KEY_RIGHT ::              262;
GLFW_KEY_LEFT ::               263;
GLFW_KEY_DOWN ::               264;
GLFW_KEY_UP ::                 265;
GLFW_KEY_PAGE_UP ::            266;
GLFW_KEY_PAGE_DOWN ::          267;
GLFW_KEY_HOME ::               268;
GLFW_KEY_END ::                269;
GLFW_KEY_CAPS_LOCK ::          280;
GLFW_KEY_SCROLL_LOCK ::        281;
GLFW_KEY_NUM_LOCK ::           282;
GLFW_KEY_PRINT_SCREEN ::       283;
GLFW_KEY_PAUSE ::              284;
GLFW_KEY_F1 ::                 290;
GLFW_KEY_F2 ::                 291;
GLFW_KEY_F3 ::                 292;
GLFW_KEY_F4 ::                 293;
GLFW_KEY_F5 ::                 294;
GLFW_KEY_F6 ::                 295;
GLFW_KEY_F7 ::                 296;
GLFW_KEY_F8 ::                 297;
GLFW_KEY_F9 ::                 298;
GLFW_KEY_F10 ::                299;
GLFW_KEY_F11 ::                300;
GLFW_KEY_F12 ::                301;
GLFW_KEY_F13 ::                302;
GLFW_KEY_F14 ::                303;
GLFW_KEY_F15 ::                304;
GLFW_KEY_F16 ::                305;
GLFW_KEY_F17 ::                306;
GLFW_KEY_F18 ::                307;
GLFW_KEY_F19 ::                308;
GLFW_KEY_F20 ::                309;
GLFW_KEY_F21 ::                310;
GLFW_KEY_F22 ::                311;
GLFW_KEY_F23 ::                312;
GLFW_KEY_F24 ::                313;
GLFW_KEY_F25 ::                314;
GLFW_KEY_KP_0 ::               320;
GLFW_KEY_KP_1 ::               321;
GLFW_KEY_KP_2 ::               322;
GLFW_KEY_KP_3 ::               323;
GLFW_KEY_KP_4 ::               324;
GLFW_KEY_KP_5 ::               325;
GLFW_KEY_KP_6 ::               326;
GLFW_KEY_KP_7 ::               327;
GLFW_KEY_KP_8 ::               328;
GLFW_KEY_KP_9 ::               329;
GLFW_KEY_KP_DECIMAL ::         330;
GLFW_KEY_KP_DIVIDE ::          331;
GLFW_KEY_KP_MULTIPLY ::        332;
GLFW_KEY_KP_SUBTRACT ::        333;
GLFW_KEY_KP_ADD ::             334;
GLFW_KEY_KP_ENTER ::           335;
GLFW_KEY_KP_EQUAL ::           336;
GLFW_KEY_LEFT_SHIFT ::         340;
GLFW_KEY_LEFT_CONTROL ::       341;
GLFW_KEY_LEFT_ALT ::           342;
GLFW_KEY_LEFT_SUPER ::         343;
GLFW_KEY_RIGHT_SHIFT ::        344;
GLFW_KEY_RIGHT_CONTROL ::      345;
GLFW_KEY_RIGHT_ALT ::          346;
GLFW_KEY_RIGHT_SUPER ::        347;
GLFW_KEY_MENU ::               348;
GLFW_KEY_LAST ::               GLFW_KEY_MENU;

//using enum_flags {
    GLFW_MOD_SHIFT ::           0x0001;
    GLFW_MOD_CONTROL ::         0x0002;
    GLFW_MOD_ALT ::             0x0004;
    GLFW_MOD_SUPER ::           0x0008;
//}

GLFW_MOUSE_BUTTON_1 ::         0;
GLFW_MOUSE_BUTTON_2 ::         1;
GLFW_MOUSE_BUTTON_3 ::         2;
GLFW_MOUSE_BUTTON_4 ::         3;
GLFW_MOUSE_BUTTON_5 ::         4;
GLFW_MOUSE_BUTTON_6 ::         5;
GLFW_MOUSE_BUTTON_7 ::         6;
GLFW_MOUSE_BUTTON_8 ::         7;
GLFW_MOUSE_BUTTON_LAST ::      GLFW_MOUSE_BUTTON_8;
GLFW_MOUSE_BUTTON_LEFT ::      GLFW_MOUSE_BUTTON_1;
GLFW_MOUSE_BUTTON_RIGHT ::     GLFW_MOUSE_BUTTON_2;
GLFW_MOUSE_BUTTON_MIDDLE ::    GLFW_MOUSE_BUTTON_3;

GLFW_JOYSTICK_1 ::             0;
GLFW_JOYSTICK_2 ::             1;
GLFW_JOYSTICK_3 ::             2;
GLFW_JOYSTICK_4 ::             3;
GLFW_JOYSTICK_5 ::             4;
GLFW_JOYSTICK_6 ::             5;
GLFW_JOYSTICK_7 ::             6;
GLFW_JOYSTICK_8 ::             7;
GLFW_JOYSTICK_9 ::             8;
GLFW_JOYSTICK_10 ::            9;
GLFW_JOYSTICK_11 ::            10;
GLFW_JOYSTICK_12 ::            11;
GLFW_JOYSTICK_13 ::            12;
GLFW_JOYSTICK_14 ::            13;
GLFW_JOYSTICK_15 ::            14;
GLFW_JOYSTICK_16 ::            15;
GLFW_JOYSTICK_LAST ::          GLFW_JOYSTICK_16;

GLFW_GAMEPAD_BUTTON_A :: 0;
GLFW_GAMEPAD_BUTTON_B :: 1;
GLFW_GAMEPAD_BUTTON_X :: 2;
GLFW_GAMEPAD_BUTTON_Y :: 3;
GLFW_GAMEPAD_BUTTON_LEFT_BUMPER :: 4;
GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER :: 5;
GLFW_GAMEPAD_BUTTON_BACK :: 6;
GLFW_GAMEPAD_BUTTON_START :: 7;
GLFW_GAMEPAD_BUTTON_GUIDE :: 8;
GLFW_GAMEPAD_BUTTON_LEFT_THUMB :: 9;
GLFW_GAMEPAD_BUTTON_RIGHT_THUMB :: 10;
GLFW_GAMEPAD_BUTTON_DPAD_UP :: 11;
GLFW_GAMEPAD_BUTTON_DPAD_RIGHT :: 12;
GLFW_GAMEPAD_BUTTON_DPAD_DOWN :: 13;
GLFW_GAMEPAD_BUTTON_DPAD_LEFT :: 14;
GLFW_GAMEPAD_BUTTON_LAST :: GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
GLFW_GAMEPAD_BUTTON_CROSS :: GLFW_GAMEPAD_BUTTON_A;
GLFW_GAMEPAD_BUTTON_CIRCLE :: GLFW_GAMEPAD_BUTTON_B;
GLFW_GAMEPAD_BUTTON_SQUARE :: GLFW_GAMEPAD_BUTTON_X;
GLFW_GAMEPAD_BUTTON_TRIANGLE :: GLFW_GAMEPAD_BUTTON_Y;
GLFW_GAMEPAD_AXIS_LEFT_X :: 0;
GLFW_GAMEPAD_AXIS_LEFT_Y :: 1;
GLFW_GAMEPAD_AXIS_RIGHT_X :: 2;
GLFW_GAMEPAD_AXIS_RIGHT_Y :: 3;
GLFW_GAMEPAD_AXIS_LEFT_TRIGGER :: 4;
GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER :: 5;
GLFW_GAMEPAD_AXIS_LAST :: GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;

GLFW_NOT_INITIALIZED ::        0x00010001;
GLFW_NO_CURRENT_CONTEXT ::     0x00010002;
GLFW_INVALID_ENUM ::           0x00010003;
GLFW_INVALID_VALUE ::          0x00010004;
GLFW_OUT_OF_MEMORY ::          0x00010005;
GLFW_API_UNAVAILABLE ::        0x00010006;
GLFW_VERSION_UNAVAILABLE ::    0x00010007;
GLFW_PLATFORM_ERROR ::         0x00010008;
GLFW_FORMAT_UNAVAILABLE ::     0x00010009;
GLFW_NO_WINDOW_CONTEXT ::      0x0001000A;
GLFW_FOCUSED ::                0x00020001;
GLFW_ICONIFIED ::              0x00020002;
GLFW_RESIZABLE ::              0x00020003;
GLFW_VISIBLE ::                0x00020004;
GLFW_DECORATED ::              0x00020005;
GLFW_AUTO_ICONIFY ::           0x00020006;
GLFW_FLOATING ::               0x00020007;
GLFW_MAXIMIZED ::              0x00020008;
GLFW_RED_BITS ::               0x00021001;
GLFW_GREEN_BITS ::             0x00021002;
GLFW_BLUE_BITS ::              0x00021003;
GLFW_ALPHA_BITS ::             0x00021004;
GLFW_DEPTH_BITS ::             0x00021005;
GLFW_STENCIL_BITS ::           0x00021006;
GLFW_ACCUM_RED_BITS ::         0x00021007;
GLFW_ACCUM_GREEN_BITS ::       0x00021008;
GLFW_ACCUM_BLUE_BITS ::        0x00021009;
GLFW_ACCUM_ALPHA_BITS ::       0x0002100A;
GLFW_AUX_BUFFERS ::            0x0002100B;
GLFW_STEREO ::                 0x0002100C;
GLFW_SAMPLES ::                0x0002100D;
GLFW_SRGB_CAPABLE ::           0x0002100E;
GLFW_REFRESH_RATE ::           0x0002100F;
GLFW_DOUBLEBUFFER ::           0x00021010;
GLFW_CLIENT_API ::             0x00022001;
GLFW_CONTEXT_VERSION_MAJOR ::  0x00022002;
GLFW_CONTEXT_VERSION_MINOR ::  0x00022003;
GLFW_CONTEXT_REVISION ::       0x00022004;
GLFW_CONTEXT_ROBUSTNESS ::     0x00022005;
GLFW_OPENGL_FORWARD_COMPAT ::  0x00022006;
GLFW_OPENGL_DEBUG_CONTEXT ::   0x00022007;
GLFW_OPENGL_PROFILE ::         0x00022008;
GLFW_CONTEXT_RELEASE_BEHAVIOR :: 0x00022009;
GLFW_CONTEXT_NO_ERROR ::       0x0002200A;
GLFW_CONTEXT_CREATION_API ::   0x0002200B;
GLFW_NO_API ::                          0;
GLFW_OPENGL_API ::             0x00030001;
GLFW_OPENGL_ES_API ::          0x00030002;
GLFW_NO_ROBUSTNESS ::                   0;
GLFW_NO_RESET_NOTIFICATION ::  0x00031001;
GLFW_LOSE_CONTEXT_ON_RESET ::  0x00031002;
GLFW_OPENGL_ANY_PROFILE ::              0;
GLFW_OPENGL_CORE_PROFILE ::    0x00032001;
GLFW_OPENGL_COMPAT_PROFILE ::  0x00032002;
GLFW_CURSOR ::                 0x00033001;
GLFW_STICKY_KEYS ::            0x00033002;
GLFW_STICKY_MOUSE_BUTTONS ::   0x00033003;
GLFW_LOCK_KEY_MODS ::          0x00033004;
GLFW_RAW_MOUSE_MOTION ::       0x00033005;
GLFW_CURSOR_NORMAL ::          0x00034001;
GLFW_CURSOR_HIDDEN ::          0x00034002;
GLFW_CURSOR_DISABLED ::        0x00034003;
GLFW_ANY_RELEASE_BEHAVIOR ::            0;
GLFW_RELEASE_BEHAVIOR_FLUSH :: 0x00035001;
GLFW_RELEASE_BEHAVIOR_NONE ::  0x00035002;
GLFW_NATIVE_CONTEXT_API ::     0x00036001;
GLFW_EGL_CONTEXT_API ::        0x00036002;
GLFW_ARROW_CURSOR ::           0x00036001;
GLFW_IBEAM_CURSOR ::           0x00036002;
GLFW_CROSSHAIR_CURSOR ::       0x00036003;
GLFW_HAND_CURSOR ::            0x00036004;
GLFW_HRESIZE_CURSOR ::         0x00036005;
GLFW_VRESIZE_CURSOR ::         0x00036006;
GLFW_CONNECTED ::              0x00040001;
GLFW_DISCONNECTED ::           0x00040002;
GLFW_DONT_CARE ::              -1;


GLFWmonitor :: struct {}
GLFWwindow :: struct {}
GLFWcursor :: struct {}

GLFWvidmode :: struct {
    width : s32;
    height : s32;
    redBits : s32;
    greenBits : s32;
    blueBits : s32;
    refreshRate : s32;
}

GLFWimage :: struct {
    width: int;
    height: int;
    pixels: *u8;
}

GLFWgammaramp :: struct {
    red: *u16;
    green: *u16;
    blue: *u16;
    size: u32;
}

GLFWgamepadstate :: struct {
    buttons: [15] u8;
    axes: [6] float;
}


// Callbacks.
GLFWerrorfun :: #type (s32, *u8) #c_call;
GLFWmonitorfun :: #type (*GLFWmonitor, s32) #c_call;
GLFWwindowposfun :: #type (*GLFWwindow, s32, s32) #c_call;
GLFWwindowsizefun :: #type (*GLFWwindow, s32, s32) #c_call;
GLFWwindowclosefun :: #type (*GLFWwindow) #c_call;
GLFWwindowrefreshfun :: #type (*GLFWwindow) #c_call;
GLFWwindowfocusfun :: #type (*GLFWwindow, s32) #c_call;
GLFWwindowiconifyfun :: #type (*GLFWwindow, s32) #c_call;
GLFWframebuffersizefun :: #type (*GLFWwindow, s32, s32) #c_call;
GLFWkeyfun :: #type (*GLFWwindow, s32, s32, s32, s32) #c_call;
GLFWcharfun :: #type (*GLFWwindow, u32) #c_call;
GLFWcharmodsfun :: #type (*GLFWwindow, u32, s32) #c_call;
GLFWmousebuttonfun :: #type (*GLFWwindow, s32, s32, s32) #c_call;
GLFWcursorposfun :: #type (*GLFWwindow, float64, float64) #c_call;
GLFWcursorenterfun :: #type (*GLFWwindow, s32) #c_call;
GLFWscrollfun :: #type (*GLFWwindow, float64, float64) #c_call;
GLFWdropfun :: #type (*GLFWwindow, s32, **u8) #c_call;
GLFWjoystickfun :: #type (s32, s32) #c_call;

GLFWglproc :: #type *void;



glfwInit :: () -> s32 #foreign glfw3;
glfwTerminate :: () #foreign glfw3;
glfwGetVersion :: (major: *s32, minor: *s32, rev: *s32) #foreign glfw3;
glfwGetVersionString :: () -> *u8 #foreign glfw3;
glfwSetErrorCallback :: (cbfun: GLFWerrorfun) -> GLFWerrorfun #foreign glfw3;
glfwGetMonitors :: (count: *s32) -> **GLFWmonitor #foreign glfw3;
glfwGetPrimaryMonitor :: () -> *GLFWmonitor #foreign glfw3;
glfwGetMonitorPos :: (monitor: *GLFWmonitor, xpos: *s32, ypos: *s32) #foreign glfw3;
glfwGetMonitorPhysicalSize :: (monitor: *GLFWmonitor, widthMM: *s32, heightMM: *s32) #foreign glfw3;
glfwGetMonitorName :: (monitor: *GLFWmonitor) -> *u8 #foreign glfw3;
glfwSetMonitorCallback :: (cbfun: GLFWmonitorfun) -> GLFWmonitorfun #foreign glfw3;
glfwGetVideoModes :: (monitor: *GLFWmonitor, count: *s32) -> *GLFWvidmode #foreign glfw3;
glfwGetVideoMode :: (monitor: *GLFWmonitor) -> *GLFWvidmode #foreign glfw3;
glfwSetGamma :: (monitor: *GLFWmonitor, gamma: float) #foreign glfw3;
glfwGetGammaRamp :: (monitor: *GLFWmonitor) -> *GLFWgammaramp #foreign glfw3;
glfwSetGammaRamp :: (monitor: *GLFWmonitor, ramp: *GLFWgammaramp) #foreign glfw3;
glfwDefaultWindowHints :: () #foreign glfw3;
glfwWindowHint :: (hint: s32, value: s32) #foreign glfw3;
glfwCreateWindow :: (width: s32, height: s32, title: *u8, monitor: *GLFWmonitor, share: *GLFWwindow) -> *GLFWwindow #foreign glfw3;
glfwDestroyWindow :: (window: *GLFWwindow) #foreign glfw3;
glfwWindowShouldClose :: (window: *GLFWwindow) -> s32 #foreign glfw3;
glfwSetWindowShouldClose :: (window: *GLFWwindow, value: s32) #foreign glfw3;
glfwSetWindowTitle :: (window: *GLFWwindow, title: *u8) #foreign glfw3;
glfwSetWindowIcon :: (window: *GLFWwindow, count: s32, images: *GLFWimage) #foreign glfw3;
glfwGetWindowPos :: (window: *GLFWwindow, xpos: *s32, ypos: *s32) #foreign glfw3;
glfwSetWindowPos :: (window: *GLFWwindow, xpos: s32, ypos: s32) #foreign glfw3;
glfwGetWindowSize :: (window: *GLFWwindow, width: *s32, height: *s32) #foreign glfw3;
glfwSetWindowSizeLimits :: (window: *GLFWwindow, minwidth: s32, minheight: s32, maxwidth: s32, maxheight: s32) #foreign glfw3;
glfwSetWindowAspectRatio :: (window: *GLFWwindow, numer: s32, denom: s32) #foreign glfw3;
glfwSetWindowSize :: (window: *GLFWwindow, width: s32, height: s32) #foreign glfw3;
glfwGetFramebufferSize :: (window: *GLFWwindow, width: *s32, height: *s32) #foreign glfw3;
glfwGetWindowFrameSize :: (window: *GLFWwindow, left: *s32, top: *s32, right: *s32, bottom: *s32) #foreign glfw3;
glfwIconifyWindow :: (window: *GLFWwindow) #foreign glfw3;
glfwRestoreWindow :: (window: *GLFWwindow) #foreign glfw3;
glfwMaximizeWindow :: (window: *GLFWwindow) #foreign glfw3;
glfwShowWindow :: (window: *GLFWwindow) #foreign glfw3;
glfwHideWindow :: (window: *GLFWwindow) #foreign glfw3;
glfwFocusWindow :: (window: *GLFWwindow) #foreign glfw3;
glfwGetWindowMonitor :: (window: *GLFWwindow) -> *GLFWmonitor #foreign glfw3;
glfwSetWindowMonitor :: (window: *GLFWwindow, monitor: *GLFWmonitor, xpos: s32, ypos: s32, width: s32, height: s32, refreshRate: s32) #foreign glfw3;
glfwGetWindowAttrib :: (window: *GLFWwindow, attrib: s32) -> s32 #foreign glfw3;
glfwSetWindowAttrib :: (window: *GLFWwindow, attrib: s32, value: s32) #foreign glfw3;
glfwSetWindowUserPointer :: (window: *GLFWwindow, pointer: *void) #foreign glfw3;
glfwGetWindowUserPointer :: (window: *GLFWwindow) -> *void #foreign glfw3;
glfwSetWindowPosCallback :: (window: *GLFWwindow, cbfun: GLFWwindowposfun) -> GLFWwindowposfun #foreign glfw3;
glfwSetWindowSizeCallback :: (window: *GLFWwindow, cbfun: GLFWwindowsizefun) -> GLFWwindowsizefun #foreign glfw3;
glfwSetWindowCloseCallback :: (window: *GLFWwindow, cbfun: GLFWwindowclosefun) -> GLFWwindowclosefun #foreign glfw3;
glfwSetWindowRefreshCallback :: (window: *GLFWwindow, cbfun: GLFWwindowrefreshfun) -> GLFWwindowrefreshfun #foreign glfw3;
glfwSetWindowFocusCallback :: (window: *GLFWwindow, cbfun: GLFWwindowfocusfun) -> GLFWwindowfocusfun #foreign glfw3;
glfwSetWindowIconifyCallback :: (window: *GLFWwindow, cbfun: GLFWwindowiconifyfun) -> GLFWwindowiconifyfun #foreign glfw3;
glfwSetFramebufferSizeCallback :: (window: *GLFWwindow, cbfun: GLFWframebuffersizefun) -> GLFWframebuffersizefun #foreign glfw3;
glfwPollEvents :: () #foreign glfw3;
glfwWaitEvents :: () #foreign glfw3;
glfwWaitEventsTimeout :: (timeout: float64) #foreign glfw3;
glfwPostEmptyEvent :: () #foreign glfw3;
glfwGetInputMode :: (window: *GLFWwindow, mode: s32) -> s32 #foreign glfw3;
glfwSetInputMode :: (window: *GLFWwindow, mode: s32, value: s32) #foreign glfw3;
glfwRawMouseMotionSupported :: () -> s32 #foreign glfw3;
glfwGetKeyName :: (key: s32, scancode: s32) -> *u8 #foreign glfw3;
glfwGetKey :: (window: *GLFWwindow, key: s32) -> s32 #foreign glfw3;
glfwGetMouseButton :: (window: *GLFWwindow, button: s32) -> s32 #foreign glfw3;
glfwGetCursorPos :: (window: *GLFWwindow, xpos: *float64, ypos: *float64) #foreign glfw3;
glfwSetCursorPos :: (window: *GLFWwindow, xpos: float64, ypos: float64) #foreign glfw3;
glfwCreateCursor :: (image: *GLFWimage, xhot: s32, yhot: s32) -> *GLFWcursor #foreign glfw3;
glfwCreateStandardCursor :: (shape: s32) -> *GLFWcursor #foreign glfw3;
glfwDestroyCursor :: (cursor: *GLFWcursor) #foreign glfw3;
glfwSetCursor :: (window: *GLFWwindow, cursor: *GLFWcursor) #foreign glfw3;
glfwSetKeyCallback :: (window: *GLFWwindow, cbfun: GLFWkeyfun) -> GLFWkeyfun #foreign glfw3;
glfwSetCharCallback :: (window: *GLFWwindow, cbfun: GLFWcharfun) -> GLFWcharfun #foreign glfw3;
glfwSetCharModsCallback :: (window: *GLFWwindow, cbfun: GLFWcharmodsfun) -> GLFWcharmodsfun #foreign glfw3;
glfwSetMouseButtonCallback :: (window: *GLFWwindow, cbfun: GLFWmousebuttonfun) -> GLFWmousebuttonfun #foreign glfw3;
glfwSetCursorPosCallback :: (window: *GLFWwindow, cbfun: GLFWcursorposfun) -> GLFWcursorposfun #foreign glfw3;
glfwSetCursorEnterCallback :: (window: *GLFWwindow, cbfun: GLFWcursorenterfun) -> GLFWcursorenterfun #foreign glfw3;
glfwSetScrollCallback :: (window: *GLFWwindow, cbfun: GLFWscrollfun) -> GLFWscrollfun #foreign glfw3;
glfwSetDropCallback :: (window: *GLFWwindow, cbfun: GLFWdropfun) -> GLFWdropfun #foreign glfw3;
glfwJoystickPresent :: (joy: s32) -> s32 #foreign glfw3;
glfwGetJoystickAxes :: (joy: s32, count: *s32) -> *float #foreign glfw3;
glfwGetJoystickButtons :: (joy: s32, count: *s32) -> *u8 #foreign glfw3;
glfwGetJoystickName :: (joy: s32) -> *u8 #foreign glfw3;
glfwJoystickIsGamepad :: (joy: s32) -> s32 #foreign glfw3;
glfwSetJoystickCallback :: (cbfun: GLFWjoystickfun) -> GLFWjoystickfun #foreign glfw3; 
glfwGetGamepadState :: (joy: s32, state: *GLFWgamepadstate) -> s32 #foreign glfw3;
glfwSetClipboardString :: (window: *GLFWwindow, str: *u8) #foreign glfw3;
glfwGetClipboardString :: (window: *GLFWwindow) -> *u8 #foreign glfw3;
glfwGetTime :: () -> float64 #foreign glfw3;
glfwSetTime :: (time: float64) #foreign glfw3;
glfwGetTimerValue :: () -> u64 #foreign glfw3;
glfwGetTimerFrequency :: () -> u64 #foreign glfw3;
glfwMakeContextCurrent :: (window: *GLFWwindow) #foreign glfw3;
glfwGetCurrentContext :: () -> *GLFWwindow #foreign glfw3;
glfwSwapBuffers :: (window: *GLFWwindow) #foreign glfw3;
glfwSwapInterval :: (interval: s32) #foreign glfw3;
glfwExtensionSupported :: (extension: *u8) -> s32 #foreign glfw3;
glfwGetProcAddress :: (procname: *u8) -> GLFWglproc #foreign glfw3;

#if GLFW_EXPOSE_VULKAN {
    GLFWvkproc :: #type *void;

    glfwVulkanSupported :: () -> s32 #foreign glfw3;
    glfwGetRequiredInstanceExtensions :: (count: * u32) -> **u8 #foreign glfw3;
    glfwGetInstanceProcAddress :: (instance: VkInstance, procname: *u8) -> GLFWvkproc #foreign glfw3;
    glfwGetPhysicalDevicePresentationSupport :: (instance: VkInstance, device: VkPhysicalDevice, queuefamily: u32) -> s32 #foreign glfw3;
    glfwCreateWindowSurface :: (instance: VkInstance, window: *GLFWwindow, allocator: *VkAllocationCallbacks, surface: *VkSurfaceKHR) -> VkResult #foreign glfw3;
}


#if GLFW_EXPOSE_NATIVE_WIN32 {
    glfwGetWin32Adapter :: (monitor: *GLFWmonitor) -> *u8 #foreign glfw3;
    glfwGetWin32Monitor :: (monitor: *GLFWmonitor) -> *u8 #foreign glfw3;
    glfwGetWin32Window :: (window: *GLFWwindow) -> HWND #foreign glfw3;
}

#if GLFW_EXPOSE_NATIVE_WGL { 
    glfwGetWGLContext :: (window: *GLFWwindow) -> HGLRC #foreign glfw3;
}

#if GLFW_EXPOSE_NATIVE_EGL { 
    glfwGetEGLDisplay :: () -> EGLDisplay #foreign glfw3;
    glfwGetEGLContext :: (window: *GLFWwindow) -> EGLContext #foreign glfw3;
    glfwGetEGLSurface :: (window: *GLFWwindow) -> EGLSurface #foreign glfw3;
}

#if GLFW_EXPOSE_NATIVE_MACOS {
//    GLFWAPI CGDirectDisplayID glfwGetCocoaMonitor(monitor: *GLFWmonitor);
//    GLFWAPI id glfwGetCocoaWindow(window: *GLFWwindow);
}

#if GLFW_EXPOSE_NATIVE_NSGL {
//    GLFWAPI id glfwGetNSGLContext(window: *GLFWwindow);
}


#if GLFW_EXPOSE_NATIVE_X11 {
//    GLFWAPI Display* glfwGetX11Display();
//    GLFWAPI RRCrtc glfwGetX11Adapter(monitor: *GLFWmonitor);
//    GLFWAPI RROutput glfwGetX11Monitor(monitor: *GLFWmonitor);
//    GLFWAPI Window glfwGetX11Window(window: *GLFWwindow);
}

#if GLFW_EXPOSE_NATIVE_GLX {
//    GLFWAPI GLXContext glfwGetGLXContext(window: *GLFWwindow);
//    GLFWAPI GLXWindow glfwGetGLXWindow(window: *GLFWwindow);
}

#if GLFW_EXPOSE_NATIVE_WAYLAND {
// GLFWAPI struct wl_display* glfwGetWaylandDisplay();
// GLFWAPI struct wl_output* glfwGetWaylandMonitor(monitor: *GLFWmonitor);
// GLFWAPI struct wl_surface* glfwGetWaylandWindow(window: *GLFWwindow);
}

#if GLFW_EXPOSE_NATIVE_MIR {
// GLFWAPI MirConnection* glfwGetMirDisplay();
// GLFWAPI int glfwGetMirMonitor(monitor: *GLFWmonitor);
// GLFWAPI MirSurface* glfwGetMirWindow(window: *GLFWwindow);
}

#scope_file

#if OS == .WINDOWS     glfw3 :: #library "win/glfw3";
else #if OS == .MACOS  glfw3 :: #library "mac/libglfw.3";
else #if OS == .LINUX  glfw3 :: #library "linux/libglfw";
